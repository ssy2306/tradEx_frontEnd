{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\KIIT\\\\Desktop\\\\llm project\\\\Frontend\\\\llm\\\\src\\\\modules\\\\textbox.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect } from 'react';\nimport { TextField, IconButton, Box } from '@mui/material';\nimport SendIcon from '@mui/icons-material/Send';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChatBox = ({\n  sendMessage\n}) => {\n  _s();\n  const [message, setMessage] = React.useState('');\n  const [chatMessages, setChatMessages] = React.useState([]);\n  useEffect(() => {\n    // Simulate initial message from the chatbot\n    const initialChatbotMessage = {\n      text: 'Hi',\n      sender: 'chatbot',\n      id: 0\n    };\n    setChatMessages([initialChatbotMessage]);\n  }, []);\n  const handleMessageChange = event => {\n    setMessage(event.target.value);\n  };\n  const handleSendMessage = async () => {\n    if (message.trim() !== '') {\n      const newMessage = {\n        text: message,\n        sender: 'user',\n        id: chatMessages.length\n      };\n\n      // Update the UI optimistically before sending the message to the server\n      setChatMessages([...chatMessages, newMessage]);\n      setMessage('');\n      try {\n        // Send message to the server at localhost:5000 (replace if needed)\n        const response = await fetch('http://localhost:5000/send-message', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            message: message\n          })\n        });\n        if (!response.ok) {\n          throw new Error('Network response was not ok.');\n        }\n        const data = await response.json();\n\n        // Update chat with the response from the server\n        const serverResponse = {\n          text: data.message,\n          // Assuming the server responds with a 'message' property\n          sender: 'chatbot',\n          id: chatMessages.length + 1 // Assign a unique ID for the server response\n        };\n\n        setChatMessages([...chatMessages, serverResponse]);\n      } catch (error) {\n        // Handle errors from server communication\n        console.error('Error sending/receiving message:', error);\n      }\n    }\n  };\n  const renderChatBubbles = () => {\n    return chatMessages.map(msg => {\n      const isUser = msg.sender === 'user';\n      const bubbleColor = isUser ? 'blue' : 'green';\n      return /*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          display: 'flex',\n          justifyContent: isUser ? 'flex-end' : 'flex-start',\n          marginBottom: '10px'\n        },\n        children: /*#__PURE__*/_jsxDEV(Box, {\n          sx: {\n            backgroundColor: bubbleColor,\n            color: 'white',\n            borderRadius: '10px',\n            padding: '8px 12px',\n            maxWidth: '70%'\n          },\n          children: msg.text\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 11\n        }, this)\n      }, msg.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 9\n      }, this);\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(Box, {\n    sx: {\n      position: 'fixed',\n      bottom: '20px',\n      // Adjust position from bottom as needed\n      width: '50%',\n      // Adjust width of the chatbox\n      left: '350px' // Adjust the left position if needed\n    },\n    children: [/*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        display: 'flex',\n        flexDirection: 'column'\n      },\n      children: renderChatBubbles()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        display: 'flex',\n        alignItems: 'center',\n        borderRadius: '10px',\n        backgroundColor: 'black',\n        // Change text box background color here\n        color: 'white',\n        // Set text color to white\n        border: '2px solid #ccc' // Grey border\n      },\n      children: [/*#__PURE__*/_jsxDEV(TextField, {\n        placeholder: \"  Type your message\",\n        variant: \"standard\",\n        size: \"small\",\n        fullWidth: true,\n        sx: {\n          borderRadius: '10px',\n          flexGrow: 1,\n          backgroundColor: 'transparent',\n          // Set transparent background color\n          '& input': {\n            color: 'white' // Set input text color to white\n          },\n\n          '& .MuiInputBase-input': {\n            caretColor: 'white' // Set caret color to white\n          },\n\n          '& label': {\n            color: 'white !important' // Set label color to white\n          }\n        },\n\n        value: message,\n        onChange: handleMessageChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(IconButton, {\n        color: \"primary\",\n        \"aria-label\": \"send message\",\n        onClick: handleSendMessage,\n        sx: {\n          marginLeft: '5px'\n        } // Adjust margin as needed\n        ,\n        children: /*#__PURE__*/_jsxDEV(SendIcon, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 144,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 89,\n    columnNumber: 5\n  }, this);\n};\n_s(ChatBox, \"n0gGZTdr2GCIha2HI49MYCWWeXc=\");\n_c = ChatBox;\nexport default ChatBox;\nvar _c;\n$RefreshReg$(_c, \"ChatBox\");","map":{"version":3,"names":["React","useEffect","TextField","IconButton","Box","SendIcon","jsxDEV","_jsxDEV","ChatBox","sendMessage","_s","message","setMessage","useState","chatMessages","setChatMessages","initialChatbotMessage","text","sender","id","handleMessageChange","event","target","value","handleSendMessage","trim","newMessage","length","response","fetch","method","headers","body","JSON","stringify","ok","Error","data","json","serverResponse","error","console","renderChatBubbles","map","msg","isUser","bubbleColor","sx","display","justifyContent","marginBottom","children","backgroundColor","color","borderRadius","padding","maxWidth","fileName","_jsxFileName","lineNumber","columnNumber","position","bottom","width","left","flexDirection","alignItems","border","placeholder","variant","size","fullWidth","flexGrow","caretColor","onChange","onClick","marginLeft","_c","$RefreshReg$"],"sources":["C:/Users/KIIT/Desktop/llm project/Frontend/llm/src/modules/textbox.js"],"sourcesContent":["import React, { useEffect } from 'react';\r\nimport { TextField, IconButton, Box } from '@mui/material';\r\nimport SendIcon from '@mui/icons-material/Send';\r\n\r\nconst ChatBox = ({ sendMessage }) => {\r\n  const [message, setMessage] = React.useState('');\r\n  const [chatMessages, setChatMessages] = React.useState([]);\r\n\r\n  useEffect(() => {\r\n    // Simulate initial message from the chatbot\r\n    const initialChatbotMessage = { text: 'Hi', sender: 'chatbot', id: 0 };\r\n    setChatMessages([initialChatbotMessage]);\r\n  }, []);\r\n\r\n  const handleMessageChange = (event) => {\r\n    setMessage(event.target.value);\r\n  };\r\n\r\n  const handleSendMessage = async () => {\r\n    if (message.trim() !== '') {\r\n      const newMessage = { text: message, sender: 'user', id: chatMessages.length };\r\n\r\n      // Update the UI optimistically before sending the message to the server\r\n      setChatMessages([...chatMessages, newMessage]);\r\n      setMessage('');\r\n\r\n      try {\r\n        // Send message to the server at localhost:5000 (replace if needed)\r\n        const response = await fetch('http://localhost:5000/send-message', {\r\n          method: 'POST',\r\n          headers: {\r\n            'Content-Type': 'application/json',\r\n          },\r\n          body: JSON.stringify({ message: message }),\r\n        });\r\n\r\n        if (!response.ok) {\r\n          throw new Error('Network response was not ok.');\r\n        }\r\n\r\n        const data = await response.json();\r\n\r\n        // Update chat with the response from the server\r\n        const serverResponse = {\r\n          text: data.message, // Assuming the server responds with a 'message' property\r\n          sender: 'chatbot',\r\n          id: chatMessages.length + 1, // Assign a unique ID for the server response\r\n        };\r\n\r\n        setChatMessages([...chatMessages, serverResponse]);\r\n      } catch (error) {\r\n        // Handle errors from server communication\r\n        console.error('Error sending/receiving message:', error);\r\n      }\r\n    }\r\n  };\r\n\r\n  const renderChatBubbles = () => {\r\n    return chatMessages.map((msg) => {\r\n      const isUser = msg.sender === 'user';\r\n      const bubbleColor = isUser ? 'blue' : 'green';\r\n\r\n      return (\r\n        <Box\r\n          key={msg.id}\r\n          sx={{\r\n            display: 'flex',\r\n            justifyContent: isUser ? 'flex-end' : 'flex-start',\r\n            marginBottom: '10px',\r\n          }}\r\n        >\r\n          <Box\r\n            sx={{\r\n              backgroundColor: bubbleColor,\r\n              color: 'white',\r\n              borderRadius: '10px',\r\n              padding: '8px 12px',\r\n              maxWidth: '70%',\r\n            }}\r\n          >\r\n            {msg.text}\r\n          </Box>\r\n        </Box>\r\n      );\r\n    });\r\n  };\r\n\r\n  return (\r\n    <Box\r\n      sx={{\r\n        position: 'fixed',\r\n        bottom: '20px', // Adjust position from bottom as needed\r\n        width: '50%', // Adjust width of the chatbox\r\n        left: '350px', // Adjust the left position if needed\r\n      }}\r\n    >\r\n      <Box\r\n        sx={{\r\n          display: 'flex',\r\n          flexDirection: 'column',\r\n        }}\r\n      >\r\n        {/* Render chat bubbles */}\r\n        {renderChatBubbles()}\r\n      </Box>\r\n      <Box\r\n        sx={{\r\n          display: 'flex',\r\n          alignItems: 'center',\r\n          borderRadius: '10px',\r\n          backgroundColor: 'black', // Change text box background color here\r\n          color: 'white', // Set text color to white\r\n          border: '2px solid #ccc', // Grey border\r\n        }}\r\n      >\r\n        <TextField\r\n          placeholder=\"  Type your message\"\r\n          variant=\"standard\"\r\n          size=\"small\"\r\n          fullWidth\r\n          sx={{\r\n            borderRadius: '10px',\r\n            flexGrow: 1,\r\n            backgroundColor: 'transparent', // Set transparent background color\r\n            '& input': {\r\n              color: 'white', // Set input text color to white\r\n            },\r\n            '& .MuiInputBase-input': {\r\n              caretColor: 'white', // Set caret color to white\r\n            },\r\n            '& label': {\r\n              color: 'white !important', // Set label color to white\r\n            },\r\n          }}\r\n          value={message}\r\n          onChange={handleMessageChange}\r\n        />\r\n        <IconButton\r\n          color=\"primary\"\r\n          aria-label=\"send message\"\r\n          onClick={handleSendMessage}\r\n          sx={{ marginLeft: '5px' }} // Adjust margin as needed\r\n        >\r\n          <SendIcon />\r\n        </IconButton>\r\n      </Box>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default ChatBox;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}